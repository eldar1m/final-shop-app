{% assign gender = '' %}
{% for tag in product.tags %}
  {% if tag contains 'gender:men' %}
    {% assign gender = 'For Men' %}
  {% elsif tag contains 'gender:women' %}
    {% assign gender = 'For Women' %}
  {% endif %}
{% endfor %}

<div class="product-page">
  <div class="product-gallery">
    {% for image in product.images %}
      <div class="product-gallery-item">
        <img src="{{ image.src | img_url: 'large' }}" alt="{{ image.alt | escape }}">
      </div>
    {% endfor %}
  </div>

  <div class="product-page-product-info">
    <div class="product-breadcrumb">
      {% if gender != '' %}
        <span class="path-item">{{ gender }}</span> /
      {% endif %}
      <span class="path-item">{{ product.vendor }}</span> /
      <span class="path-item">{{ product.title }}</span>
    </div>

    <div class="product-page-product-title">
      {{ product.vendor }}
      {{ product.title }}
    </div>

    <div class="product-page-product-price" id="product-price">
      {{ product.selected_or_first_available_variant.price | money }}
    </div>

    <form method="post" action="/cart/add" id="add-to-cart-form">
      <div class="product-page-product-variants">
        {% if product.variants.size == 1 and product.variants.first.available %}
          <input type="hidden" name="id" value="{{ product.variants.first.id }}">
          Only one size
        {% elsif product.variants.size > 1 %}
          {% for variant in product.variants %}
            <label class="variant-button {% unless variant.available %}disabled{% endunless %}">
              <label class="size-option">
                <input
                  type="radio"
                  name="id"
                  value="{{ variant.id }}"
                  {% if forloop.first and variant.available %}
                    checked
                  {% endif %}
                  {% unless variant.available %}
                    disabled
                  {% endunless %}
                >
                <span>{{ variant.title }}</span>
              </label>
            </label>
          {% endfor %}
        {% else %}
          <span> Out of stock</span>
        {% endif %}
      </div>

      <div class="quantity-wrapper">
        <button type="button" class="quantity-btn" data-change="-1">‹</button>
        <input type="number" id="main-quantity" name="quantity" value="1" min="1" class="quantity-input">
        <button type="button" class="quantity-btn" data-change="1">›</button>
      </div>

      {% if product.metafields.custom.product_list %}
        <div id="purchase-options" class="purchase-options">
          <div class="purchase-toggle">
            <label class="purchase-type active" data-type="one-time">
              One Time Purchase
              <input type="radio" name="purchase_type" value="one-time" checked hidden>
            </label>

            <label class="purchase-type" data-type="subscribe">
              Subscribe & Save
              <input type="radio" name="purchase_type" value="subscribe" hidden>
            </label>

            <div id="subscription-options" style="display: none;">
              <select id="subscription-plan-select" class="subscription-select">
                {% assign sub_products = product.metafields.custom.product_list.value %}
                {% for sub_product in sub_products %}
                  {% case forloop.index0 %}
                    {% when 0 %}
                      {% assign label = 'Monthly' %}
                    {% when 1 %}
                      {% assign label = 'Quarterly' %}
                    {% when 2 %}
                      {% assign label = 'Annually' %}
                    {% else %}
                      {% assign label = sub_product.title %}
                  {% endcase %}
                  <option value="{{ sub_product.variants.first.id }}">{{ label }}</option>
                {% endfor %}
              </select>
            </div>
          </div>

          <input type="hidden" id="selected-product-id" name="id" value="{{ product.variants.first.id }}">
        </div>
      {% endif %}

      <div class="product-actions">
        <button
          type="submit"
          class="product-page-add-to-cart"
          {% unless product.available %}
            disabled
          {% endunless %}
        >
          Add to cart
        </button>
        <button type="button" class="product-page-add-to-wishlist">Add to wishlist</button>
      </div>
    </form>

    <div class="product-page-product-description">
      <div class="product-attribute-selector">
        <select id="attribute-select">
          <option value="description">Description</option>
          <option value="reviews">Reviews</option>
        </select>
        <div class="select-icon-down">
          {% render 'icon-chevron-down' %}
        </div>
      </div>

      <div class="product-attribute-content">
        <div id="description-content" class="attribute-content active">
          {{ product.description }}
        </div>

        <div id="reviews-content" class="attribute-content">reviews</div>
      </div>
    </div>
  </div>
</div>

{% render 'sticky-add-to-cart' %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const select = document.getElementById('attribute-select');
    const contents = document.querySelectorAll('.attribute-content');

    select.addEventListener('change', function () {
      contents.forEach((content) => content.classList.remove('active'));
      const selected = document.getElementById(`${this.value}-content`);
      if (selected) selected.classList.add('active');
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('add-to-cart-form');
    const cartDrawer = document.getElementById('cart-drawer'); // your cart drawer id
    const cartOverlay = document.querySelector('.cart-drawer-overlay'); // overlay if you have it

    form.addEventListener('submit', function (e) {
      e.preventDefault(); // stop the normal form submit

      const formData = new FormData(form);

      fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
        headers: {
          Accept: 'application/json',
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then((data) => {
          console.log('Product added to cart:', data);

          fetch('/cart.js')
            .then((res) => res.json())
            .then((cart) => {
              if (typeof renderCart === 'function') {
                renderCart(cart);
              }
              cartDrawer.classList.add('active');
              cartOverlay.classList.add('active');
            });
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    });
  });

  if (typeof Shopify === 'undefined') {
    Shopify = {};
  }

  Shopify.formatMoney = function (cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }

    const value = parseFloat(cents) / 100;

    format = format || '{{ shop.money_format }}';

    return format.replace(/\{\{\s*(amount|amount_no_decimals)\s*\}\}/, function (match, type) {
      let formatted = '';

      switch (type) {
        case 'amount':
          formatted = value.toFixed(2);
          break;
        case 'amount_no_decimals':
          formatted = Math.round(value).toString();
          break;
      }

      return formatted.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    });
  };

  document.addEventListener('DOMContentLoaded', function () {
    const variantRadios = document.querySelectorAll('input[name="id"]');
    const priceDisplay = document.getElementById('product-price');
    const imageDisplay = document.getElementById('product-main-image');

    variantRadios.forEach((radio) => {
      radio.addEventListener('change', function () {
        const variantId = this.value;

        fetch(`/products/{{ product.handle }}.js`)
          .then((res) => res.json())
          .then((productData) => {
            const selectedVariant = productData.variants.find((v) => v.id == variantId);

            if (selectedVariant) {
              priceDisplay.innerText = Shopify.formatMoney(selectedVariant.price, '{{ shop.money_format }}');
            }
          });
      });
    });
  });

  document.querySelectorAll('.quantity-btn').forEach((btn) => {
    btn.addEventListener('click', () => {
      const wrapper = btn.closest('.quantity-wrapper');
      const input = wrapper.querySelector('input[type="number"]');
      const change = parseInt(btn.dataset.change, 10);
      const newVal = Math.max(1, parseInt(input.value || '1', 10) + change);
      input.value = newVal;
      input.dispatchEvent(new Event('input'));
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    const oneTimeInput = document.querySelector('input[value="one-time"]');
    const subscribeInput = document.querySelector('input[value="subscribe"]');
    const subscriptionOptions = document.getElementById('subscription-options');
    const variantSelect = document.getElementById('subscription-plan-select');
    const hiddenProductIdInput = document.getElementById('selected-product-id');
    const oneTimeDefaultVariantId = '{{ product.variants.first.id }}';

    function updateProductId() {
      if (subscribeInput.checked) {
        hiddenProductIdInput.value = variantSelect.value;
      } else {
        hiddenProductIdInput.value = oneTimeDefaultVariantId;
      }
    }

    // Toggle visibility of subscription options
    subscribeInput.addEventListener('change', () => {
      subscriptionOptions.style.display = 'block';
      updateProductId();
    });

    oneTimeInput.addEventListener('change', () => {
      subscriptionOptions.style.display = 'none';
      updateProductId();
    });

    // Update product ID when a new subscription is selected
    variantSelect.addEventListener('change', updateProductId);

    // Set initial variant ID
    updateProductId();
  });

  document.addEventListener('DOMContentLoaded', function () {
    const purchaseTypeButtons = document.querySelectorAll('.purchase-type');
    const subscriptionOptions = document.getElementById('subscription-options');
    const hiddenInput = document.getElementById('selected-product-id');
    const subSelect = document.getElementById('subscription-plan-select');
    const oneTimeVariantId = '{{ product.variants.first.id }}';
    const oneTimeInput = document.querySelector('input[value="one-time"]');
    const subscribeInput = document.querySelector('input[value="subscribe"]');

    function updateDisplayedPrice(variantId) {
      fetch(`/variants/${variantId}.js`)
        .then((res) => res.json())
        .then((variant) => {
          const priceElement = document.getElementById('product-price');
          if (priceElement && variant && variant.price) {
            priceElement.innerText = Shopify.formatMoney(variant.price, '{{ shop.money_format }}');
          }
        })
        .catch((err) => console.error('Price update error:', err));
    }

    purchaseTypeButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        purchaseTypeButtons.forEach((b) => b.classList.remove('active'));
        btn.classList.add('active');

        const type = btn.dataset.type;
        const variantId = type === 'subscribe' ? subSelect.value : oneTimeVariantId;

        hiddenInput.value = variantId;
        updateDisplayedPrice(variantId);

        subscriptionOptions.style.display = type === 'subscribe' ? 'block' : 'none';

        const input = btn.querySelector('input[type="radio"]');
        if (input) input.checked = true;
      });
    });

    subSelect.addEventListener('change', () => {
      if (subscribeInput.checked) {
        hiddenInput.value = subSelect.value;
        updateDisplayedPrice(subSelect.value);
      }
    });

    // Initial price set
    updateDisplayedPrice(oneTimeVariantId);
  });
</script>
