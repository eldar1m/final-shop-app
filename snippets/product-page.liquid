{% assign gender = '' %}
{% for tag in product.tags %}
  {% if tag contains 'gender:men' %}
    {% assign gender = 'For Men' %}
  {% elsif tag contains 'gender:women' %}
    {% assign gender = 'For Women' %}
  {% endif %}
{% endfor %}

<div class="product-page">
  <div class="product-gallery">
    {% for image in product.images %}
      <div class="product-gallery-item">
        <img src="{{ image.src | img_url: 'large' }}" alt="{{ image.alt | escape }}">
      </div>
    {% endfor %}
  </div>

  <div class="product-page-product-info">
    <div class="product-breadcrumb">
      {% if gender != '' %}
        <span class="path-item">{{ gender }}</span> /
      {% endif %}
      <span class="path-item">{{ product.vendor }}</span> /
      <span class="path-item">{{ product.title }}</span>
    </div>

    <div class="product-page-product-title">
      {{ product.vendor }}
      {{ product.title }}
    </div>

    <div class="product-page-product-price" id="product-price">
      {{ product.selected_or_first_available_variant.price | money }}
    </div>

    <form method="post" action="/cart/add" id="add-to-cart-form">
      <div class="product-page-product-variants">
        {% if product.variants.size == 1 and product.variants.first.available %}
          <input type="hidden" name="id" value="{{ product.variants.first.id }}">
          Only one size
        {% else %}
          {% for variant in product.variants %}
            <label class="variant-button {% unless variant.available %}disabled{% endunless %}">
              <label class="size-option">
                <input
                  type="radio"
                  name="id"
                  value="{{ variant.id }}"
                  {% unless variant.available %}
                    disabled
                  {% endunless %}
                >
                <span>{{ variant.title }}</span>
              </label>
            </label>
          {% endfor %}
        {% endif %}
      </div>

      <div class="product-actions">
        <button
          type="submit"
          class="product-page-add-to-cart"
          {% unless product.available %}
            disabled
          {% endunless %}
        >
          Add to cart
        </button>
        <button type="button" class="product-page-add-to-wishlist">Add to wishlist</button>
      </div>
    </form>

    <div class="product-page-product-description">
      <div class="product-attribute-selector">
        <select id="attribute-select">
          <option value="description">Description</option>
          <option value="reviews">Reviews</option>
        </select>
        <div class="select-icon-down">
          {% render 'icon-chevron-down' %}
        </div>
      </div>

      <div class="product-attribute-content">
        <div id="description-content" class="attribute-content active">
          {{ product.description }}
        </div>

        <div id="reviews-content" class="attribute-content">reviews</div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const select = document.getElementById('attribute-select');
    const contents = document.querySelectorAll('.attribute-content');

    select.addEventListener('change', function () {
      contents.forEach((content) => content.classList.remove('active'));
      const selected = document.getElementById(`${this.value}-content`);
      if (selected) selected.classList.add('active');
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('add-to-cart-form');
    const cartDrawer = document.getElementById('cart-drawer'); // your cart drawer id
    const cartOverlay = document.querySelector('.cart-drawer-overlay'); // overlay if you have it

    form.addEventListener('submit', function (e) {
      e.preventDefault(); // stop the normal form submit

      const formData = new FormData(form);

      fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
        headers: {
          Accept: 'application/json',
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then((data) => {
          console.log('Product added to cart:', data);

          // Fetch and render updated cart
          fetch('/cart.js')
            .then((res) => res.json())
            .then((cart) => {
              if (typeof renderCart === 'function') {
                renderCart(cart); // Make sure this function is globally available
              }
              cartDrawer.classList.add('active');
              cartOverlay.classList.add('active');
            });
        })
        .catch((error) => {
          console.error('Error:', error);
        });
    });
  });

  // Fallback if Shopify.formatMoney doesn't exist
  if (typeof Shopify === 'undefined') {
    Shopify = {};
  }

  Shopify.formatMoney = function (cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }

    const value = parseFloat(cents) / 100;

    format = format || '{{ shop.money_format }}';

    return format.replace(/\{\{\s*(amount|amount_no_decimals)\s*\}\}/, function (match, type) {
      let formatted = '';

      switch (type) {
        case 'amount':
          formatted = value.toFixed(2);
          break;
        case 'amount_no_decimals':
          formatted = Math.round(value).toString();
          break;
      }

      return formatted.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    });
  };

  document.addEventListener('DOMContentLoaded', function () {
    const variantRadios = document.querySelectorAll('input[name="id"]');
    const priceDisplay = document.getElementById('product-price');
    const imageDisplay = document.getElementById('product-main-image');

    variantRadios.forEach((radio) => {
      radio.addEventListener('change', function () {
        const variantId = this.value;

        // Get variant data from Shopify
        fetch(`/products/{{ product.handle }}.js`)
          .then((res) => res.json())
          .then((productData) => {
            const selectedVariant = productData.variants.find((v) => v.id == variantId);

            if (selectedVariant) {
              // Update price
              priceDisplay.innerText = Shopify.formatMoney(selectedVariant.price, '{{ shop.money_format }}');
            }
          });
      });
    });
  });
</script>
